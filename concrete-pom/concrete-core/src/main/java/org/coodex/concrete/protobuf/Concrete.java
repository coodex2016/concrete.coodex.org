// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: concrete.proto

package org.coodex.concrete.protobuf;

@SuppressWarnings("all")
public final class Concrete {
    private Concrete() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }

    public interface RequestPackageOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.coodex.concrete.protobuf.RequestPackage)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * DataPackage
         * </pre>
         *
         * <code>bytes compressed = 1;</code>
         *
         * @return The compressed.
         */
        com.google.protobuf.ByteString getCompressed();

        /**
         * <code>string content = 2;</code>
         *
         * @return The content.
         */
        String getContent();

        /**
         * <code>string content = 2;</code>
         *
         * @return The bytes for content.
         */
        com.google.protobuf.ByteString
        getContentBytes();

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */
        int getSubjoinCount();

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */
        boolean containsSubjoin(
                String key);

        /**
         * Use {@link #getSubjoinMap()} instead.
         */
        @Deprecated
        java.util.Map<String, String>
        getSubjoin();

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */
        java.util.Map<String, String>
        getSubjoinMap();

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */

        String getSubjoinOrDefault(
                String key,
                String defaultValue);

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */

        String getSubjoinOrThrow(
                String key);

        /**
         * <code>string concreteTokenId = 4;</code>
         *
         * @return The concreteTokenId.
         */
        String getConcreteTokenId();

        /**
         * <code>string concreteTokenId = 4;</code>
         *
         * @return The bytes for concreteTokenId.
         */
        com.google.protobuf.ByteString
        getConcreteTokenIdBytes();

        /**
         * <code>string serviceId = 5;</code>
         *
         * @return The serviceId.
         */
        String getServiceId();

        /**
         * <code>string serviceId = 5;</code>
         *
         * @return The bytes for serviceId.
         */
        com.google.protobuf.ByteString
        getServiceIdBytes();
    }

    /**
     * Protobuf type {@code org.coodex.concrete.protobuf.RequestPackage}
     */
    public static final class RequestPackage extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.coodex.concrete.protobuf.RequestPackage)
            RequestPackageOrBuilder {
        private static final long serialVersionUID = 0L;

        // Use RequestPackage.newBuilder() to construct.
        private RequestPackage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private RequestPackage() {
            compressed_ = com.google.protobuf.ByteString.EMPTY;
            content_ = "";
            concreteTokenId_ = "";
            serviceId_ = "";
        }

        @Override
        @SuppressWarnings({"unused"})
        protected Object newInstance(
                UnusedPrivateParameter unused) {
            return new RequestPackage();
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private RequestPackage(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            }
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10: {

                            compressed_ = input.readBytes();
                            break;
                        }
                        case 18: {
                            String s = input.readStringRequireUtf8();

                            content_ = s;
                            break;
                        }
                        case 26: {
                            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                                subjoin_ = com.google.protobuf.MapField.newMapField(
                                        SubjoinDefaultEntryHolder.defaultEntry);
                                mutable_bitField0_ |= 0x00000001;
                            }
                            com.google.protobuf.MapEntry<String, String>
                                    subjoin__ = input.readMessage(
                                    SubjoinDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                            subjoin_.getMutableMap().put(
                                    subjoin__.getKey(), subjoin__.getValue());
                            break;
                        }
                        case 34: {
                            String s = input.readStringRequireUtf8();

                            concreteTokenId_ = s;
                            break;
                        }
                        case 42: {
                            String s = input.readStringRequireUtf8();

                            serviceId_ = s;
                            break;
                        }
                        default: {
                            if (!parseUnknownField(
                                    input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return Concrete.internal_static_org_coodex_concrete_protobuf_RequestPackage_descriptor;
        }

        @SuppressWarnings({"rawtypes"})
        @Override
        protected com.google.protobuf.MapField internalGetMapField(
                int number) {
            switch (number) {
                case 3:
                    return internalGetSubjoin();
                default:
                    throw new RuntimeException(
                            "Invalid map field number: " + number);
            }
        }

        @Override
        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return Concrete.internal_static_org_coodex_concrete_protobuf_RequestPackage_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            RequestPackage.class, Builder.class);
        }

        public static final int COMPRESSED_FIELD_NUMBER = 1;
        private com.google.protobuf.ByteString compressed_;

        /**
         * <pre>
         * DataPackage
         * </pre>
         *
         * <code>bytes compressed = 1;</code>
         *
         * @return The compressed.
         */
        @Override
        public com.google.protobuf.ByteString getCompressed() {
            return compressed_;
        }

        public static final int CONTENT_FIELD_NUMBER = 2;
        private volatile Object content_;

        /**
         * <code>string content = 2;</code>
         *
         * @return The content.
         */
        @Override
        public String getContent() {
            Object ref = content_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                content_ = s;
                return s;
            }
        }

        /**
         * <code>string content = 2;</code>
         *
         * @return The bytes for content.
         */
        @Override
        public com.google.protobuf.ByteString
        getContentBytes() {
            Object ref = content_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                content_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int SUBJOIN_FIELD_NUMBER = 3;

        private static final class SubjoinDefaultEntryHolder {
            static final com.google.protobuf.MapEntry<
                    String, String> defaultEntry =
                    com.google.protobuf.MapEntry
                            .<String, String>newDefaultInstance(
                                    Concrete.internal_static_org_coodex_concrete_protobuf_RequestPackage_SubjoinEntry_descriptor,
                                    com.google.protobuf.WireFormat.FieldType.STRING,
                                    "",
                                    com.google.protobuf.WireFormat.FieldType.STRING,
                                    "");
        }

        private com.google.protobuf.MapField<
                String, String> subjoin_;

        private com.google.protobuf.MapField<String, String>
        internalGetSubjoin() {
            if (subjoin_ == null) {
                return com.google.protobuf.MapField.emptyMapField(
                        SubjoinDefaultEntryHolder.defaultEntry);
            }
            return subjoin_;
        }

        public int getSubjoinCount() {
            return internalGetSubjoin().getMap().size();
        }

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */

        @Override
        public boolean containsSubjoin(
                String key) {
            if (key == null) {
                throw new NullPointerException();
            }
            return internalGetSubjoin().getMap().containsKey(key);
        }

        /**
         * Use {@link #getSubjoinMap()} instead.
         */
        @Override
        @Deprecated
        public java.util.Map<String, String> getSubjoin() {
            return getSubjoinMap();
        }

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */
        @Override

        public java.util.Map<String, String> getSubjoinMap() {
            return internalGetSubjoin().getMap();
        }

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */
        @Override

        public String getSubjoinOrDefault(
                String key,
                String defaultValue) {
            if (key == null) {
                throw new NullPointerException();
            }
            java.util.Map<String, String> map =
                    internalGetSubjoin().getMap();
            return map.containsKey(key) ? map.get(key) : defaultValue;
        }

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */
        @Override

        public String getSubjoinOrThrow(
                String key) {
            if (key == null) {
                throw new NullPointerException();
            }
            java.util.Map<String, String> map =
                    internalGetSubjoin().getMap();
            if (!map.containsKey(key)) {
                throw new IllegalArgumentException();
            }
            return map.get(key);
        }

        public static final int CONCRETETOKENID_FIELD_NUMBER = 4;
        private volatile Object concreteTokenId_;

        /**
         * <code>string concreteTokenId = 4;</code>
         *
         * @return The concreteTokenId.
         */
        @Override
        public String getConcreteTokenId() {
            Object ref = concreteTokenId_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                concreteTokenId_ = s;
                return s;
            }
        }

        /**
         * <code>string concreteTokenId = 4;</code>
         *
         * @return The bytes for concreteTokenId.
         */
        @Override
        public com.google.protobuf.ByteString
        getConcreteTokenIdBytes() {
            Object ref = concreteTokenId_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                concreteTokenId_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int SERVICEID_FIELD_NUMBER = 5;
        private volatile Object serviceId_;

        /**
         * <code>string serviceId = 5;</code>
         *
         * @return The serviceId.
         */
        @Override
        public String getServiceId() {
            Object ref = serviceId_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                serviceId_ = s;
                return s;
            }
        }

        /**
         * <code>string serviceId = 5;</code>
         *
         * @return The bytes for serviceId.
         */
        @Override
        public com.google.protobuf.ByteString
        getServiceIdBytes() {
            Object ref = serviceId_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                serviceId_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        private byte memoizedIsInitialized = -1;

        @Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!compressed_.isEmpty()) {
                output.writeBytes(1, compressed_);
            }
            if (!getContentBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 2, content_);
            }
            com.google.protobuf.GeneratedMessageV3
                    .serializeStringMapTo(
                            output,
                            internalGetSubjoin(),
                            SubjoinDefaultEntryHolder.defaultEntry,
                            3);
            if (!getConcreteTokenIdBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 4, concreteTokenId_);
            }
            if (!getServiceIdBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 5, serviceId_);
            }
            unknownFields.writeTo(output);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!compressed_.isEmpty()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(1, compressed_);
            }
            if (!getContentBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, content_);
            }
            for (java.util.Map.Entry<String, String> entry
                    : internalGetSubjoin().getMap().entrySet()) {
                com.google.protobuf.MapEntry<String, String>
                        subjoin__ = SubjoinDefaultEntryHolder.defaultEntry.newBuilderForType()
                        .setKey(entry.getKey())
                        .setValue(entry.getValue())
                        .build();
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, subjoin__);
            }
            if (!getConcreteTokenIdBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, concreteTokenId_);
            }
            if (!getServiceIdBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, serviceId_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof RequestPackage)) {
                return super.equals(obj);
            }
            RequestPackage other = (RequestPackage) obj;

            if (!getCompressed()
                    .equals(other.getCompressed())) return false;
            if (!getContent()
                    .equals(other.getContent())) return false;
            if (!internalGetSubjoin().equals(
                    other.internalGetSubjoin())) return false;
            if (!getConcreteTokenId()
                    .equals(other.getConcreteTokenId())) return false;
            if (!getServiceId()
                    .equals(other.getServiceId())) return false;
            if (!unknownFields.equals(other.unknownFields)) return false;
            return true;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + COMPRESSED_FIELD_NUMBER;
            hash = (53 * hash) + getCompressed().hashCode();
            hash = (37 * hash) + CONTENT_FIELD_NUMBER;
            hash = (53 * hash) + getContent().hashCode();
            if (!internalGetSubjoin().getMap().isEmpty()) {
                hash = (37 * hash) + SUBJOIN_FIELD_NUMBER;
                hash = (53 * hash) + internalGetSubjoin().hashCode();
            }
            hash = (37 * hash) + CONCRETETOKENID_FIELD_NUMBER;
            hash = (53 * hash) + getConcreteTokenId().hashCode();
            hash = (37 * hash) + SERVICEID_FIELD_NUMBER;
            hash = (53 * hash) + getServiceId().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static RequestPackage parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static RequestPackage parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static RequestPackage parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static RequestPackage parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static RequestPackage parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static RequestPackage parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static RequestPackage parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static RequestPackage parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static RequestPackage parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static RequestPackage parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static RequestPackage parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static RequestPackage parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(RequestPackage prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.coodex.concrete.protobuf.RequestPackage}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.coodex.concrete.protobuf.RequestPackage)
                RequestPackageOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return Concrete.internal_static_org_coodex_concrete_protobuf_RequestPackage_descriptor;
            }

            @SuppressWarnings({"rawtypes"})
            protected com.google.protobuf.MapField internalGetMapField(
                    int number) {
                switch (number) {
                    case 3:
                        return internalGetSubjoin();
                    default:
                        throw new RuntimeException(
                                "Invalid map field number: " + number);
                }
            }

            @SuppressWarnings({"rawtypes"})
            protected com.google.protobuf.MapField internalGetMutableMapField(
                    int number) {
                switch (number) {
                    case 3:
                        return internalGetMutableSubjoin();
                    default:
                        throw new RuntimeException(
                                "Invalid map field number: " + number);
                }
            }

            @Override
            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return Concrete.internal_static_org_coodex_concrete_protobuf_RequestPackage_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                RequestPackage.class, Builder.class);
            }

            // Construct using org.coodex.concrete.protobuf.Concrete.RequestPackage.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                compressed_ = com.google.protobuf.ByteString.EMPTY;

                content_ = "";

                internalGetMutableSubjoin().clear();
                concreteTokenId_ = "";

                serviceId_ = "";

                return this;
            }

            @Override
            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return Concrete.internal_static_org_coodex_concrete_protobuf_RequestPackage_descriptor;
            }

            @Override
            public RequestPackage getDefaultInstanceForType() {
                return RequestPackage.getDefaultInstance();
            }

            @Override
            public RequestPackage build() {
                RequestPackage result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public RequestPackage buildPartial() {
                RequestPackage result = new RequestPackage(this);
                int from_bitField0_ = bitField0_;
                result.compressed_ = compressed_;
                result.content_ = content_;
                result.subjoin_ = internalGetSubjoin();
                result.subjoin_.makeImmutable();
                result.concreteTokenId_ = concreteTokenId_;
                result.serviceId_ = serviceId_;
                onBuilt();
                return result;
            }

            @Override
            public Builder clone() {
                return super.clone();
            }

            @Override
            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return super.setField(field, value);
            }

            @Override
            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return super.clearField(field);
            }

            @Override
            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return super.clearOneof(oneof);
            }

            @Override
            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return super.setRepeatedField(field, index, value);
            }

            @Override
            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return super.addRepeatedField(field, value);
            }

            @Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof RequestPackage) {
                    return mergeFrom((RequestPackage) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(RequestPackage other) {
                if (other == RequestPackage.getDefaultInstance()) return this;
                if (other.getCompressed() != com.google.protobuf.ByteString.EMPTY) {
                    setCompressed(other.getCompressed());
                }
                if (!other.getContent().isEmpty()) {
                    content_ = other.content_;
                    onChanged();
                }
                internalGetMutableSubjoin().mergeFrom(
                        other.internalGetSubjoin());
                if (!other.getConcreteTokenId().isEmpty()) {
                    concreteTokenId_ = other.concreteTokenId_;
                    onChanged();
                }
                if (!other.getServiceId().isEmpty()) {
                    serviceId_ = other.serviceId_;
                    onChanged();
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            @Override
            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                RequestPackage parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (RequestPackage) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private com.google.protobuf.ByteString compressed_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <pre>
             * DataPackage
             * </pre>
             *
             * <code>bytes compressed = 1;</code>
             *
             * @return The compressed.
             */
            @Override
            public com.google.protobuf.ByteString getCompressed() {
                return compressed_;
            }

            /**
             * <pre>
             * DataPackage
             * </pre>
             *
             * <code>bytes compressed = 1;</code>
             *
             * @param value The compressed to set.
             * @return This builder for chaining.
             */
            public Builder setCompressed(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                compressed_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * DataPackage
             * </pre>
             *
             * <code>bytes compressed = 1;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearCompressed() {

                compressed_ = getDefaultInstance().getCompressed();
                onChanged();
                return this;
            }

            private Object content_ = "";

            /**
             * <code>string content = 2;</code>
             *
             * @return The content.
             */
            public String getContent() {
                Object ref = content_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    content_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>string content = 2;</code>
             *
             * @return The bytes for content.
             */
            public com.google.protobuf.ByteString
            getContentBytes() {
                Object ref = content_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    content_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>string content = 2;</code>
             *
             * @param value The content to set.
             * @return This builder for chaining.
             */
            public Builder setContent(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                content_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>string content = 2;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearContent() {

                content_ = getDefaultInstance().getContent();
                onChanged();
                return this;
            }

            /**
             * <code>string content = 2;</code>
             *
             * @param value The bytes for content to set.
             * @return This builder for chaining.
             */
            public Builder setContentBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                content_ = value;
                onChanged();
                return this;
            }

            private com.google.protobuf.MapField<
                    String, String> subjoin_;

            private com.google.protobuf.MapField<String, String>
            internalGetSubjoin() {
                if (subjoin_ == null) {
                    return com.google.protobuf.MapField.emptyMapField(
                            SubjoinDefaultEntryHolder.defaultEntry);
                }
                return subjoin_;
            }

            private com.google.protobuf.MapField<String, String>
            internalGetMutableSubjoin() {
                onChanged();
                ;
                if (subjoin_ == null) {
                    subjoin_ = com.google.protobuf.MapField.newMapField(
                            SubjoinDefaultEntryHolder.defaultEntry);
                }
                if (!subjoin_.isMutable()) {
                    subjoin_ = subjoin_.copy();
                }
                return subjoin_;
            }

            public int getSubjoinCount() {
                return internalGetSubjoin().getMap().size();
            }

            /**
             * <code>map&lt;string, string&gt; subjoin = 3;</code>
             */

            @Override
            public boolean containsSubjoin(
                    String key) {
                if (key == null) {
                    throw new NullPointerException();
                }
                return internalGetSubjoin().getMap().containsKey(key);
            }

            /**
             * Use {@link #getSubjoinMap()} instead.
             */
            @Override
            @Deprecated
            public java.util.Map<String, String> getSubjoin() {
                return getSubjoinMap();
            }

            /**
             * <code>map&lt;string, string&gt; subjoin = 3;</code>
             */
            @Override

            public java.util.Map<String, String> getSubjoinMap() {
                return internalGetSubjoin().getMap();
            }

            /**
             * <code>map&lt;string, string&gt; subjoin = 3;</code>
             */
            @Override

            public String getSubjoinOrDefault(
                    String key,
                    String defaultValue) {
                if (key == null) {
                    throw new NullPointerException();
                }
                java.util.Map<String, String> map =
                        internalGetSubjoin().getMap();
                return map.containsKey(key) ? map.get(key) : defaultValue;
            }

            /**
             * <code>map&lt;string, string&gt; subjoin = 3;</code>
             */
            @Override

            public String getSubjoinOrThrow(
                    String key) {
                if (key == null) {
                    throw new NullPointerException();
                }
                java.util.Map<String, String> map =
                        internalGetSubjoin().getMap();
                if (!map.containsKey(key)) {
                    throw new IllegalArgumentException();
                }
                return map.get(key);
            }

            public Builder clearSubjoin() {
                internalGetMutableSubjoin().getMutableMap()
                        .clear();
                return this;
            }

            /**
             * <code>map&lt;string, string&gt; subjoin = 3;</code>
             */

            public Builder removeSubjoin(
                    String key) {
                if (key == null) {
                    throw new NullPointerException();
                }
                internalGetMutableSubjoin().getMutableMap()
                        .remove(key);
                return this;
            }

            /**
             * Use alternate mutation accessors instead.
             */
            @Deprecated
            public java.util.Map<String, String>
            getMutableSubjoin() {
                return internalGetMutableSubjoin().getMutableMap();
            }

            /**
             * <code>map&lt;string, string&gt; subjoin = 3;</code>
             */
            public Builder putSubjoin(
                    String key,
                    String value) {
                if (key == null) {
                    throw new NullPointerException();
                }
                if (value == null) {
                    throw new NullPointerException();
                }
                internalGetMutableSubjoin().getMutableMap()
                        .put(key, value);
                return this;
            }

            /**
             * <code>map&lt;string, string&gt; subjoin = 3;</code>
             */

            public Builder putAllSubjoin(
                    java.util.Map<String, String> values) {
                internalGetMutableSubjoin().getMutableMap()
                        .putAll(values);
                return this;
            }

            private Object concreteTokenId_ = "";

            /**
             * <code>string concreteTokenId = 4;</code>
             *
             * @return The concreteTokenId.
             */
            public String getConcreteTokenId() {
                Object ref = concreteTokenId_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    concreteTokenId_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>string concreteTokenId = 4;</code>
             *
             * @return The bytes for concreteTokenId.
             */
            public com.google.protobuf.ByteString
            getConcreteTokenIdBytes() {
                Object ref = concreteTokenId_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    concreteTokenId_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>string concreteTokenId = 4;</code>
             *
             * @param value The concreteTokenId to set.
             * @return This builder for chaining.
             */
            public Builder setConcreteTokenId(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                concreteTokenId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>string concreteTokenId = 4;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearConcreteTokenId() {

                concreteTokenId_ = getDefaultInstance().getConcreteTokenId();
                onChanged();
                return this;
            }

            /**
             * <code>string concreteTokenId = 4;</code>
             *
             * @param value The bytes for concreteTokenId to set.
             * @return This builder for chaining.
             */
            public Builder setConcreteTokenIdBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                concreteTokenId_ = value;
                onChanged();
                return this;
            }

            private Object serviceId_ = "";

            /**
             * <code>string serviceId = 5;</code>
             *
             * @return The serviceId.
             */
            public String getServiceId() {
                Object ref = serviceId_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    serviceId_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>string serviceId = 5;</code>
             *
             * @return The bytes for serviceId.
             */
            public com.google.protobuf.ByteString
            getServiceIdBytes() {
                Object ref = serviceId_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    serviceId_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>string serviceId = 5;</code>
             *
             * @param value The serviceId to set.
             * @return This builder for chaining.
             */
            public Builder setServiceId(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                serviceId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>string serviceId = 5;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearServiceId() {

                serviceId_ = getDefaultInstance().getServiceId();
                onChanged();
                return this;
            }

            /**
             * <code>string serviceId = 5;</code>
             *
             * @param value The bytes for serviceId to set.
             * @return This builder for chaining.
             */
            public Builder setServiceIdBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                serviceId_ = value;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }

            @Override
            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:org.coodex.concrete.protobuf.RequestPackage)
        }

        // @@protoc_insertion_point(class_scope:org.coodex.concrete.protobuf.RequestPackage)
        private static final RequestPackage DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new RequestPackage();
        }

        public static RequestPackage getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<RequestPackage>
                PARSER = new com.google.protobuf.AbstractParser<RequestPackage>() {
            @Override
            public RequestPackage parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new RequestPackage(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<RequestPackage> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<RequestPackage> getParserForType() {
            return PARSER;
        }

        @Override
        public RequestPackage getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface ResponsePackageOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.coodex.concrete.protobuf.ResponsePackage)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * DataPackage
         * </pre>
         *
         * <code>bytes compressed = 1;</code>
         *
         * @return The compressed.
         */
        com.google.protobuf.ByteString getCompressed();

        /**
         * <code>string content = 2;</code>
         *
         * @return The content.
         */
        String getContent();

        /**
         * <code>string content = 2;</code>
         *
         * @return The bytes for content.
         */
        com.google.protobuf.ByteString
        getContentBytes();

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */
        int getSubjoinCount();

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */
        boolean containsSubjoin(
                String key);

        /**
         * Use {@link #getSubjoinMap()} instead.
         */
        @Deprecated
        java.util.Map<String, String>
        getSubjoin();

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */
        java.util.Map<String, String>
        getSubjoinMap();

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */

        String getSubjoinOrDefault(
                String key,
                String defaultValue);

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */

        String getSubjoinOrThrow(
                String key);

        /**
         * <code>string concreteTokenId = 4;</code>
         *
         * @return The concreteTokenId.
         */
        String getConcreteTokenId();

        /**
         * <code>string concreteTokenId = 4;</code>
         *
         * @return The bytes for concreteTokenId.
         */
        com.google.protobuf.ByteString
        getConcreteTokenIdBytes();

        /**
         * <code>bool ok = 5;</code>
         *
         * @return The ok.
         */
        boolean getOk();
    }

    /**
     * Protobuf type {@code org.coodex.concrete.protobuf.ResponsePackage}
     */
    public static final class ResponsePackage extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.coodex.concrete.protobuf.ResponsePackage)
            ResponsePackageOrBuilder {
        private static final long serialVersionUID = 0L;

        // Use ResponsePackage.newBuilder() to construct.
        private ResponsePackage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private ResponsePackage() {
            compressed_ = com.google.protobuf.ByteString.EMPTY;
            content_ = "";
            concreteTokenId_ = "";
        }

        @Override
        @SuppressWarnings({"unused"})
        protected Object newInstance(
                UnusedPrivateParameter unused) {
            return new ResponsePackage();
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private ResponsePackage(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            }
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10: {

                            compressed_ = input.readBytes();
                            break;
                        }
                        case 18: {
                            String s = input.readStringRequireUtf8();

                            content_ = s;
                            break;
                        }
                        case 26: {
                            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                                subjoin_ = com.google.protobuf.MapField.newMapField(
                                        SubjoinDefaultEntryHolder.defaultEntry);
                                mutable_bitField0_ |= 0x00000001;
                            }
                            com.google.protobuf.MapEntry<String, String>
                                    subjoin__ = input.readMessage(
                                    SubjoinDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                            subjoin_.getMutableMap().put(
                                    subjoin__.getKey(), subjoin__.getValue());
                            break;
                        }
                        case 34: {
                            String s = input.readStringRequireUtf8();

                            concreteTokenId_ = s;
                            break;
                        }
                        case 40: {

                            ok_ = input.readBool();
                            break;
                        }
                        default: {
                            if (!parseUnknownField(
                                    input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return Concrete.internal_static_org_coodex_concrete_protobuf_ResponsePackage_descriptor;
        }

        @SuppressWarnings({"rawtypes"})
        @Override
        protected com.google.protobuf.MapField internalGetMapField(
                int number) {
            switch (number) {
                case 3:
                    return internalGetSubjoin();
                default:
                    throw new RuntimeException(
                            "Invalid map field number: " + number);
            }
        }

        @Override
        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return Concrete.internal_static_org_coodex_concrete_protobuf_ResponsePackage_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            ResponsePackage.class, Builder.class);
        }

        public static final int COMPRESSED_FIELD_NUMBER = 1;
        private com.google.protobuf.ByteString compressed_;

        /**
         * <pre>
         * DataPackage
         * </pre>
         *
         * <code>bytes compressed = 1;</code>
         *
         * @return The compressed.
         */
        @Override
        public com.google.protobuf.ByteString getCompressed() {
            return compressed_;
        }

        public static final int CONTENT_FIELD_NUMBER = 2;
        private volatile Object content_;

        /**
         * <code>string content = 2;</code>
         *
         * @return The content.
         */
        @Override
        public String getContent() {
            Object ref = content_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                content_ = s;
                return s;
            }
        }

        /**
         * <code>string content = 2;</code>
         *
         * @return The bytes for content.
         */
        @Override
        public com.google.protobuf.ByteString
        getContentBytes() {
            Object ref = content_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                content_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int SUBJOIN_FIELD_NUMBER = 3;

        private static final class SubjoinDefaultEntryHolder {
            static final com.google.protobuf.MapEntry<
                    String, String> defaultEntry =
                    com.google.protobuf.MapEntry
                            .<String, String>newDefaultInstance(
                                    Concrete.internal_static_org_coodex_concrete_protobuf_ResponsePackage_SubjoinEntry_descriptor,
                                    com.google.protobuf.WireFormat.FieldType.STRING,
                                    "",
                                    com.google.protobuf.WireFormat.FieldType.STRING,
                                    "");
        }

        private com.google.protobuf.MapField<
                String, String> subjoin_;

        private com.google.protobuf.MapField<String, String>
        internalGetSubjoin() {
            if (subjoin_ == null) {
                return com.google.protobuf.MapField.emptyMapField(
                        SubjoinDefaultEntryHolder.defaultEntry);
            }
            return subjoin_;
        }

        public int getSubjoinCount() {
            return internalGetSubjoin().getMap().size();
        }

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */

        @Override
        public boolean containsSubjoin(
                String key) {
            if (key == null) {
                throw new NullPointerException();
            }
            return internalGetSubjoin().getMap().containsKey(key);
        }

        /**
         * Use {@link #getSubjoinMap()} instead.
         */
        @Override
        @Deprecated
        public java.util.Map<String, String> getSubjoin() {
            return getSubjoinMap();
        }

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */
        @Override

        public java.util.Map<String, String> getSubjoinMap() {
            return internalGetSubjoin().getMap();
        }

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */
        @Override

        public String getSubjoinOrDefault(
                String key,
                String defaultValue) {
            if (key == null) {
                throw new NullPointerException();
            }
            java.util.Map<String, String> map =
                    internalGetSubjoin().getMap();
            return map.containsKey(key) ? map.get(key) : defaultValue;
        }

        /**
         * <code>map&lt;string, string&gt; subjoin = 3;</code>
         */
        @Override

        public String getSubjoinOrThrow(
                String key) {
            if (key == null) {
                throw new NullPointerException();
            }
            java.util.Map<String, String> map =
                    internalGetSubjoin().getMap();
            if (!map.containsKey(key)) {
                throw new IllegalArgumentException();
            }
            return map.get(key);
        }

        public static final int CONCRETETOKENID_FIELD_NUMBER = 4;
        private volatile Object concreteTokenId_;

        /**
         * <code>string concreteTokenId = 4;</code>
         *
         * @return The concreteTokenId.
         */
        @Override
        public String getConcreteTokenId() {
            Object ref = concreteTokenId_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                concreteTokenId_ = s;
                return s;
            }
        }

        /**
         * <code>string concreteTokenId = 4;</code>
         *
         * @return The bytes for concreteTokenId.
         */
        @Override
        public com.google.protobuf.ByteString
        getConcreteTokenIdBytes() {
            Object ref = concreteTokenId_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                concreteTokenId_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int OK_FIELD_NUMBER = 5;
        private boolean ok_;

        /**
         * <code>bool ok = 5;</code>
         *
         * @return The ok.
         */
        @Override
        public boolean getOk() {
            return ok_;
        }

        private byte memoizedIsInitialized = -1;

        @Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!compressed_.isEmpty()) {
                output.writeBytes(1, compressed_);
            }
            if (!getContentBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 2, content_);
            }
            com.google.protobuf.GeneratedMessageV3
                    .serializeStringMapTo(
                            output,
                            internalGetSubjoin(),
                            SubjoinDefaultEntryHolder.defaultEntry,
                            3);
            if (!getConcreteTokenIdBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 4, concreteTokenId_);
            }
            if (ok_ != false) {
                output.writeBool(5, ok_);
            }
            unknownFields.writeTo(output);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!compressed_.isEmpty()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(1, compressed_);
            }
            if (!getContentBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, content_);
            }
            for (java.util.Map.Entry<String, String> entry
                    : internalGetSubjoin().getMap().entrySet()) {
                com.google.protobuf.MapEntry<String, String>
                        subjoin__ = SubjoinDefaultEntryHolder.defaultEntry.newBuilderForType()
                        .setKey(entry.getKey())
                        .setValue(entry.getValue())
                        .build();
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, subjoin__);
            }
            if (!getConcreteTokenIdBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, concreteTokenId_);
            }
            if (ok_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(5, ok_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof ResponsePackage)) {
                return super.equals(obj);
            }
            ResponsePackage other = (ResponsePackage) obj;

            if (!getCompressed()
                    .equals(other.getCompressed())) return false;
            if (!getContent()
                    .equals(other.getContent())) return false;
            if (!internalGetSubjoin().equals(
                    other.internalGetSubjoin())) return false;
            if (!getConcreteTokenId()
                    .equals(other.getConcreteTokenId())) return false;
            if (getOk()
                    != other.getOk()) return false;
            if (!unknownFields.equals(other.unknownFields)) return false;
            return true;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + COMPRESSED_FIELD_NUMBER;
            hash = (53 * hash) + getCompressed().hashCode();
            hash = (37 * hash) + CONTENT_FIELD_NUMBER;
            hash = (53 * hash) + getContent().hashCode();
            if (!internalGetSubjoin().getMap().isEmpty()) {
                hash = (37 * hash) + SUBJOIN_FIELD_NUMBER;
                hash = (53 * hash) + internalGetSubjoin().hashCode();
            }
            hash = (37 * hash) + CONCRETETOKENID_FIELD_NUMBER;
            hash = (53 * hash) + getConcreteTokenId().hashCode();
            hash = (37 * hash) + OK_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getOk());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static ResponsePackage parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ResponsePackage parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ResponsePackage parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ResponsePackage parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ResponsePackage parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static ResponsePackage parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static ResponsePackage parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static ResponsePackage parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static ResponsePackage parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static ResponsePackage parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static ResponsePackage parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static ResponsePackage parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(ResponsePackage prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.coodex.concrete.protobuf.ResponsePackage}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.coodex.concrete.protobuf.ResponsePackage)
                ResponsePackageOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return Concrete.internal_static_org_coodex_concrete_protobuf_ResponsePackage_descriptor;
            }

            @SuppressWarnings({"rawtypes"})
            protected com.google.protobuf.MapField internalGetMapField(
                    int number) {
                switch (number) {
                    case 3:
                        return internalGetSubjoin();
                    default:
                        throw new RuntimeException(
                                "Invalid map field number: " + number);
                }
            }

            @SuppressWarnings({"rawtypes"})
            protected com.google.protobuf.MapField internalGetMutableMapField(
                    int number) {
                switch (number) {
                    case 3:
                        return internalGetMutableSubjoin();
                    default:
                        throw new RuntimeException(
                                "Invalid map field number: " + number);
                }
            }

            @Override
            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return Concrete.internal_static_org_coodex_concrete_protobuf_ResponsePackage_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                ResponsePackage.class, Builder.class);
            }

            // Construct using org.coodex.concrete.protobuf.Concrete.ResponsePackage.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                compressed_ = com.google.protobuf.ByteString.EMPTY;

                content_ = "";

                internalGetMutableSubjoin().clear();
                concreteTokenId_ = "";

                ok_ = false;

                return this;
            }

            @Override
            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return Concrete.internal_static_org_coodex_concrete_protobuf_ResponsePackage_descriptor;
            }

            @Override
            public ResponsePackage getDefaultInstanceForType() {
                return ResponsePackage.getDefaultInstance();
            }

            @Override
            public ResponsePackage build() {
                ResponsePackage result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public ResponsePackage buildPartial() {
                ResponsePackage result = new ResponsePackage(this);
                int from_bitField0_ = bitField0_;
                result.compressed_ = compressed_;
                result.content_ = content_;
                result.subjoin_ = internalGetSubjoin();
                result.subjoin_.makeImmutable();
                result.concreteTokenId_ = concreteTokenId_;
                result.ok_ = ok_;
                onBuilt();
                return result;
            }

            @Override
            public Builder clone() {
                return super.clone();
            }

            @Override
            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return super.setField(field, value);
            }

            @Override
            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return super.clearField(field);
            }

            @Override
            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return super.clearOneof(oneof);
            }

            @Override
            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return super.setRepeatedField(field, index, value);
            }

            @Override
            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return super.addRepeatedField(field, value);
            }

            @Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof ResponsePackage) {
                    return mergeFrom((ResponsePackage) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(ResponsePackage other) {
                if (other == ResponsePackage.getDefaultInstance()) return this;
                if (other.getCompressed() != com.google.protobuf.ByteString.EMPTY) {
                    setCompressed(other.getCompressed());
                }
                if (!other.getContent().isEmpty()) {
                    content_ = other.content_;
                    onChanged();
                }
                internalGetMutableSubjoin().mergeFrom(
                        other.internalGetSubjoin());
                if (!other.getConcreteTokenId().isEmpty()) {
                    concreteTokenId_ = other.concreteTokenId_;
                    onChanged();
                }
                if (other.getOk() != false) {
                    setOk(other.getOk());
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            @Override
            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                ResponsePackage parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (ResponsePackage) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private com.google.protobuf.ByteString compressed_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <pre>
             * DataPackage
             * </pre>
             *
             * <code>bytes compressed = 1;</code>
             *
             * @return The compressed.
             */
            @Override
            public com.google.protobuf.ByteString getCompressed() {
                return compressed_;
            }

            /**
             * <pre>
             * DataPackage
             * </pre>
             *
             * <code>bytes compressed = 1;</code>
             *
             * @param value The compressed to set.
             * @return This builder for chaining.
             */
            public Builder setCompressed(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                compressed_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * DataPackage
             * </pre>
             *
             * <code>bytes compressed = 1;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearCompressed() {

                compressed_ = getDefaultInstance().getCompressed();
                onChanged();
                return this;
            }

            private Object content_ = "";

            /**
             * <code>string content = 2;</code>
             *
             * @return The content.
             */
            public String getContent() {
                Object ref = content_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    content_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>string content = 2;</code>
             *
             * @return The bytes for content.
             */
            public com.google.protobuf.ByteString
            getContentBytes() {
                Object ref = content_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    content_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>string content = 2;</code>
             *
             * @param value The content to set.
             * @return This builder for chaining.
             */
            public Builder setContent(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                content_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>string content = 2;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearContent() {

                content_ = getDefaultInstance().getContent();
                onChanged();
                return this;
            }

            /**
             * <code>string content = 2;</code>
             *
             * @param value The bytes for content to set.
             * @return This builder for chaining.
             */
            public Builder setContentBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                content_ = value;
                onChanged();
                return this;
            }

            private com.google.protobuf.MapField<
                    String, String> subjoin_;

            private com.google.protobuf.MapField<String, String>
            internalGetSubjoin() {
                if (subjoin_ == null) {
                    return com.google.protobuf.MapField.emptyMapField(
                            SubjoinDefaultEntryHolder.defaultEntry);
                }
                return subjoin_;
            }

            private com.google.protobuf.MapField<String, String>
            internalGetMutableSubjoin() {
                onChanged();
                ;
                if (subjoin_ == null) {
                    subjoin_ = com.google.protobuf.MapField.newMapField(
                            SubjoinDefaultEntryHolder.defaultEntry);
                }
                if (!subjoin_.isMutable()) {
                    subjoin_ = subjoin_.copy();
                }
                return subjoin_;
            }

            public int getSubjoinCount() {
                return internalGetSubjoin().getMap().size();
            }

            /**
             * <code>map&lt;string, string&gt; subjoin = 3;</code>
             */

            @Override
            public boolean containsSubjoin(
                    String key) {
                if (key == null) {
                    throw new NullPointerException();
                }
                return internalGetSubjoin().getMap().containsKey(key);
            }

            /**
             * Use {@link #getSubjoinMap()} instead.
             */
            @Override
            @Deprecated
            public java.util.Map<String, String> getSubjoin() {
                return getSubjoinMap();
            }

            /**
             * <code>map&lt;string, string&gt; subjoin = 3;</code>
             */
            @Override

            public java.util.Map<String, String> getSubjoinMap() {
                return internalGetSubjoin().getMap();
            }

            /**
             * <code>map&lt;string, string&gt; subjoin = 3;</code>
             */
            @Override

            public String getSubjoinOrDefault(
                    String key,
                    String defaultValue) {
                if (key == null) {
                    throw new NullPointerException();
                }
                java.util.Map<String, String> map =
                        internalGetSubjoin().getMap();
                return map.containsKey(key) ? map.get(key) : defaultValue;
            }

            /**
             * <code>map&lt;string, string&gt; subjoin = 3;</code>
             */
            @Override

            public String getSubjoinOrThrow(
                    String key) {
                if (key == null) {
                    throw new NullPointerException();
                }
                java.util.Map<String, String> map =
                        internalGetSubjoin().getMap();
                if (!map.containsKey(key)) {
                    throw new IllegalArgumentException();
                }
                return map.get(key);
            }

            public Builder clearSubjoin() {
                internalGetMutableSubjoin().getMutableMap()
                        .clear();
                return this;
            }

            /**
             * <code>map&lt;string, string&gt; subjoin = 3;</code>
             */

            public Builder removeSubjoin(
                    String key) {
                if (key == null) {
                    throw new NullPointerException();
                }
                internalGetMutableSubjoin().getMutableMap()
                        .remove(key);
                return this;
            }

            /**
             * Use alternate mutation accessors instead.
             */
            @Deprecated
            public java.util.Map<String, String>
            getMutableSubjoin() {
                return internalGetMutableSubjoin().getMutableMap();
            }

            /**
             * <code>map&lt;string, string&gt; subjoin = 3;</code>
             */
            public Builder putSubjoin(
                    String key,
                    String value) {
                if (key == null) {
                    throw new NullPointerException();
                }
                if (value == null) {
                    throw new NullPointerException();
                }
                internalGetMutableSubjoin().getMutableMap()
                        .put(key, value);
                return this;
            }

            /**
             * <code>map&lt;string, string&gt; subjoin = 3;</code>
             */

            public Builder putAllSubjoin(
                    java.util.Map<String, String> values) {
                internalGetMutableSubjoin().getMutableMap()
                        .putAll(values);
                return this;
            }

            private Object concreteTokenId_ = "";

            /**
             * <code>string concreteTokenId = 4;</code>
             *
             * @return The concreteTokenId.
             */
            public String getConcreteTokenId() {
                Object ref = concreteTokenId_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    concreteTokenId_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>string concreteTokenId = 4;</code>
             *
             * @return The bytes for concreteTokenId.
             */
            public com.google.protobuf.ByteString
            getConcreteTokenIdBytes() {
                Object ref = concreteTokenId_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    concreteTokenId_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>string concreteTokenId = 4;</code>
             *
             * @param value The concreteTokenId to set.
             * @return This builder for chaining.
             */
            public Builder setConcreteTokenId(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                concreteTokenId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>string concreteTokenId = 4;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearConcreteTokenId() {

                concreteTokenId_ = getDefaultInstance().getConcreteTokenId();
                onChanged();
                return this;
            }

            /**
             * <code>string concreteTokenId = 4;</code>
             *
             * @param value The bytes for concreteTokenId to set.
             * @return This builder for chaining.
             */
            public Builder setConcreteTokenIdBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                concreteTokenId_ = value;
                onChanged();
                return this;
            }

            private boolean ok_;

            /**
             * <code>bool ok = 5;</code>
             *
             * @return The ok.
             */
            @Override
            public boolean getOk() {
                return ok_;
            }

            /**
             * <code>bool ok = 5;</code>
             *
             * @param value The ok to set.
             * @return This builder for chaining.
             */
            public Builder setOk(boolean value) {

                ok_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>bool ok = 5;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearOk() {

                ok_ = false;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }

            @Override
            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:org.coodex.concrete.protobuf.ResponsePackage)
        }

        // @@protoc_insertion_point(class_scope:org.coodex.concrete.protobuf.ResponsePackage)
        private static final ResponsePackage DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new ResponsePackage();
        }

        public static ResponsePackage getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<ResponsePackage>
                PARSER = new com.google.protobuf.AbstractParser<ResponsePackage>() {
            @Override
            public ResponsePackage parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new ResponsePackage(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<ResponsePackage> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<ResponsePackage> getParserForType() {
            return PARSER;
        }

        @Override
        public ResponsePackage getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_coodex_concrete_protobuf_RequestPackage_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_coodex_concrete_protobuf_RequestPackage_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_coodex_concrete_protobuf_RequestPackage_SubjoinEntry_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_coodex_concrete_protobuf_RequestPackage_SubjoinEntry_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_coodex_concrete_protobuf_ResponsePackage_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_coodex_concrete_protobuf_ResponsePackage_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_coodex_concrete_protobuf_ResponsePackage_SubjoinEntry_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_coodex_concrete_protobuf_ResponsePackage_SubjoinEntry_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        String[] descriptorData = {
                "\n\016concrete.proto\022\034org.coodex.concrete.pr" +
                        "otobuf\"\335\001\n\016RequestPackage\022\022\n\ncompressed\030" +
                        "\001 \001(\014\022\017\n\007content\030\002 \001(\t\022J\n\007subjoin\030\003 \003(\0132" +
                        "9.org.coodex.concrete.protobuf.RequestPa" +
                        "ckage.SubjoinEntry\022\027\n\017concreteTokenId\030\004 " +
                        "\001(\t\022\021\n\tserviceId\030\005 \001(\t\032.\n\014SubjoinEntry\022\013" +
                        "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\330\001\n\017Respo" +
                        "nsePackage\022\022\n\ncompressed\030\001 \001(\014\022\017\n\007conten" +
                        "t\030\002 \001(\t\022K\n\007subjoin\030\003 \003(\0132:.org.coodex.co" +
                        "ncrete.protobuf.ResponsePackage.SubjoinE" +
                        "ntry\022\027\n\017concreteTokenId\030\004 \001(\t\022\n\n\002ok\030\005 \001(" +
                        "\010\032.\n\014SubjoinEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030" +
                        "\002 \001(\t:\0028\001b\006proto3"
        };
        descriptor = com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                        });
        internal_static_org_coodex_concrete_protobuf_RequestPackage_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_org_coodex_concrete_protobuf_RequestPackage_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_coodex_concrete_protobuf_RequestPackage_descriptor,
                new String[]{"Compressed", "Content", "Subjoin", "ConcreteTokenId", "ServiceId",});
        internal_static_org_coodex_concrete_protobuf_RequestPackage_SubjoinEntry_descriptor =
                internal_static_org_coodex_concrete_protobuf_RequestPackage_descriptor.getNestedTypes().get(0);
        internal_static_org_coodex_concrete_protobuf_RequestPackage_SubjoinEntry_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_coodex_concrete_protobuf_RequestPackage_SubjoinEntry_descriptor,
                new String[]{"Key", "Value",});
        internal_static_org_coodex_concrete_protobuf_ResponsePackage_descriptor =
                getDescriptor().getMessageTypes().get(1);
        internal_static_org_coodex_concrete_protobuf_ResponsePackage_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_coodex_concrete_protobuf_ResponsePackage_descriptor,
                new String[]{"Compressed", "Content", "Subjoin", "ConcreteTokenId", "Ok",});
        internal_static_org_coodex_concrete_protobuf_ResponsePackage_SubjoinEntry_descriptor =
                internal_static_org_coodex_concrete_protobuf_ResponsePackage_descriptor.getNestedTypes().get(0);
        internal_static_org_coodex_concrete_protobuf_ResponsePackage_SubjoinEntry_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_coodex_concrete_protobuf_ResponsePackage_SubjoinEntry_descriptor,
                new String[]{"Key", "Value",});
    }

    // @@protoc_insertion_point(outer_class_scope)
}
